[기존 코드]
function solution(ingredient) {
    let count = 0;

    while (true) {
        let preCount = count;
        for (let i = 0; i < ingredient.length; i++) {
            if (ingredient[i] === 1) {
                if (ingredient[i + 1] === 2) {
                    if (ingredient[i + 2] === 3) {
                        if (ingredient[i + 3] === 1) {
                            count++
                            ingredient.splice(i, 4)
                            break;
                        }
                    }
                }
            }
        }
        if (count === preCount) {
            break;
        }
    }
    return count
}

[수정 코드]
function solution(ingredient) {
    let count = 0;
    const arr = [];

    for (let i = 0; i < ingredient.length; i++) {
        arr.push(ingredient[i]);

        if (arr[arr.length - 1] === 1 && arr[arr.length - 2] === 3 && arr[arr.length - 3] === 2 && arr[arr.length - 4] === 1) {
            count++
            arr.splice(arr.length - 4, 4)
        }
    }

    return count
}

[코드 리뷰]
기존 코드는 매우 무식하게 풀었다...
while문 안에 for문을 넣어 1231이 없을 때 까지 계속 for문을 돌렸기에...
당연한 결과 시간 초과가 발생되었다...

해당 문제를 해결하기 위해 stack에 대한 개념을 알게 됐다
빈 배열을 생성하여 해당 배열에 인자로 받은 배열의 요소를 하나씩 추가하여
추가된 요소에 마지막 요소부터 -4번째 요소까지 문재ㅔ에서 주어진 숫자가 반복되면
해당 요소를 지워주면서 count를 증가시켜주면 됐다

이렇게 하면 반복문을 한번만 돌기 때문에 이전 코드보다 시간이 훨씬 덜 소요된다.
