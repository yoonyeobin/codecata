// 기존 방법 : 50개 테스트 15초 정도 소요
function solution(n, m, section) {
    let count = 0;
    let currentWall = 1;

    while (currentWall <= n) {
        if (section.includes(currentWall)) {
            currentWall += m;
            count += 1;
        }
        else {
            currentWall += 1;
        }
    }
    return count;
}


// 이중 while문 : 50개 테스트 5초 정도 소요
function solution(n, m, section) {
    let count = 0;

    while (section.length !== 0) {
        let currentWall = section[0];
        while (section[0] < currentWall + m) {
            section.shift()
        }
        count += 1
    }
    return count;
}

[코드리뷰]
기존에는 while문을 한번만 써서 currnetWall이 최대 벽길이가 될 때 까지
section에 해당 cureentWall이 있는지를 찾아주었고
있다면 curerentWall은 m만큼 칠해졌기 때문에 그만큼 증가 시켜주었다.
그렇지 않으면 1만 증가시켜주는 식으로 하였다.

두번째 방법은 while문을 이중으로 활용하여 
바깥 while문은 section의 요소가 다 사라질 때 까지
안에 while문은 section의 첫번째 인자가 더이상 칠할 수 없는 벽보다 작다면 shift매서드로 지워주었다.

만약 section 배열의 길이가 길다면,
첫번째 코드는 inclueds를 사용하여 매 반복마다 section을 순회하는데 시간이 더 걸리지만,
두번째 코드는 section의 불필요한 요소는 지워주면서 currentWall + m 만큼만 순회하기 때문에 시간이 덜 소요된다!


