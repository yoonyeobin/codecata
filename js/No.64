[기조 코드]
function solution(X, Y) {
    // 공통된 숫자 찾기
    const commonNumber = []
    X = X.split('');
    Y = Y.split('');

    for (let i = 0; i < X.length; i++) {
        for (let j = 0; j < Y.length; j++) {
            if (X[i] === Y[j]) {
                commonNumber.push(X[i])
                Y.splice(j, 1)
                break;
            }
        }
    }

    commonNumber.sort((a, b) => b - a)

    // 공통된 숫자가 모두 0 이라면
    if (commonNumber[0] === '0') {
        return "0"
    }


    // 공통된 숫자가 없다면 "-1" return
    if (commonNumber.length === 0) {
        return "-1"
    }


    const answer = commonNumber.join('')

    return String(answer)
}

[변경 코드]
function solution(X, Y) {
    const commonNumber = [];
    const countX = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    const countY = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

    // 공통된 숫자 갯수 세기
    for (const num of X) {
        countX[num]++
    }

    for (const num of Y) {
        countY[num]++
    }

    // 공통 숫자 추가해주기
    for (let i = 9; i >= 0; i--) {
        const commonCount = Math.min(countX[i], countY[i])
        for (let j = 0; j < commonCount; j++) {
            commonNumber.push(i)
        }
    }

    // 공통된 숫자가 모두 0이라면 0 return
    if (commonNumber[0] === 0) {
        return "0"
    }

    // 공통된 숫자가 없다면 -1 return
    if (commonNumber.length === 0) {
        return "-1"
    }

    const answer = commonNumber.join("")
    return answer;
}
[코드리뷰]
기존에 공통된 숫자를 2중 for문을 통해 찾아주다보니 시간초과 에러가 발생되었다
이중 for문이 아닌 각각 숫자에서 공통된 숫자의 갯수를 세주는 방식으로 변경하였다
먼저 각각의 숫자가 인덱스 별로 몇개가 존재하는지 갯수를 셀 수 있는 2개의 배열을 선언해 주고
X, Y라는 숫자를 순회하며 해당 인덱스의 카운트를 올려주었다

배열의 길이가 각각 10개씩 줄어들었으니 이제 이중 for문을 이용하여 각각의 인덱스 중 더 작은 숫자만큼
commonNumber 배열에 해당 수만큼 인덱스 값을 추가해주었다

예외 처리를 if문을 통해 해주고 commonNumber 배열을 문자열로 바꾸어 리턴해주었다
