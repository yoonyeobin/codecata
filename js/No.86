function solution(elements) {
    const uniqueSums = new Set();
    const n = elements.length;
    const circularElements = elements.concat(elements); // 원형 효과를 위해 두 번 붙이기
    
    for (let length = 1; length <= n; length++) {
        for (let start = 0; start < n; start++) {
            // start 인덱스부터 길이 length만큼의 부분 수열 합 구하기
            const sum = circularElements.slice(start, start + length).reduce((a, b) => a + b, 0);
            uniqueSums.add(sum); // 합을 Set에 추가해 중복 방지
        }
    }
    
    return uniqueSums.size; // 가능한 합의 개수 반환
}

[코드 리뷰]
요새 왜 매일 나 혼자만의 힘으로 풀 수가 없는지...
정말 코태기가 오는 것 같다..

먼저 Set 메서드를 통해 중복된 요소가 추가되지 않도록 배열을 선언해준다
또한 원형수열의 효과를 주기위해 인자로 받은 배열을 concat을 통해 2번 나열해주었다

반복문을 통해 우선 인자로 들어온 배열의 길이만큼 반복을 돌아주면서
(이유는 결국 길이가 인자갯수인 부분수열까지 나오기 때문)
안에 이중 반복으로 시작하는 인덱스 값을 증가시켜주면서 반복을 돌아준다
그렇게 하면 length가 증가할 수록 start에서부터 length만큼 잘라줄 수 있기 때문이다.

그렇게 원형 효과를 준 배열을 통해 slice 메서드를 이용하여 start 인덱스부터 start + length 전까지의 요소만 추출하여
reudce 메서드를 통해 잘려진 부분수열들의 합을 구해주었다.

해당 합을 add 메서드를 통해 추가해주면 중복되어있지 않다면 추가되게 되고
Set 메서드로 생성한 배열의 길이를 최종적으로 리턴해주었다.
