function solution(a, b) {
    var answer = '';
    const dayOfTheWeek = ['FRI', 'SAT', 'SUN', 'MON', 'TUE', 'WED', 'THU'];
    let index = 0
    switch (a) {
        case 1:
            for (let i = 1; i <= b; i++) {
                index += 1;
            }
            answer = dayOfTheWeek[(index - 1) % dayOfTheWeek.length];
            break;
        case 2:
            index = 31;
            for (let i = 1; i <= b; i++) {
                index += 1;
            }
            answer = dayOfTheWeek[(index - 1) % dayOfTheWeek.length];
            break;
        case 3:
            index = 31 + 29;
            for (let i = 1; i <= b; i++) {
                index += 1;
            }
            answer = dayOfTheWeek[(index - 1) % dayOfTheWeek.length];
            break;
        case 4:
            index = 31 + 29 + 31;
            for (let i = 1; i <= b; i++) {
                index += 1;
            }
            answer = dayOfTheWeek[(index - 1) % dayOfTheWeek.length];
            break;
        case 5:
            index = 31 + 29 + 31 + 30;
            for (let i = 1; i <= b; i++) {
                index += 1;
            }
            answer = dayOfTheWeek[(index - 1) % dayOfTheWeek.length];
            break;
        case 6:
            index = 31 + 29 + 31 + 30 + 31
            for (let i = 1; i <= b; i++) {
                index += 1;
            }
            answer = dayOfTheWeek[(index - 1) % dayOfTheWeek.length];
            break;
        case 7:
            index = 31 + 29 + 31 + 30 + 31 + 30
            for (let i = 1; i <= b; i++) {
                index += 1;
            }
            answer = dayOfTheWeek[(index - 1) % dayOfTheWeek.length];
            break;
        case 8:
            index = 31 + 29 + 31 + 30 + 31 + 30 + 31
            for (let i = 1; i <= b; i++) {
                index += 1;
            }
            answer = dayOfTheWeek[(index - 1) % dayOfTheWeek.length];
            break;
        case 9:
            index = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31
            for (let i = 1; i <= b; i++) {
                index += 1;
            }
            answer = dayOfTheWeek[(index - 1) % dayOfTheWeek.length];
            break;
        case 10:
            index = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30
            for (let i = 1; i <= b; i++) {
                index += 1;
            }
            answer = dayOfTheWeek[(index - 1) % dayOfTheWeek.length];
            break;
        case 11:
            index = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31
            for (let i = 1; i <= b; i++) {
                index += 1;
            }
            answer = dayOfTheWeek[(index - 1) % dayOfTheWeek.length];
            break;
        case 12:
            index = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30
            for (let i = 1; i <= b; i++) {
                index += 1;
            }
            answer = dayOfTheWeek[(index - 1) % dayOfTheWeek.length];
            break;
    }
    return answer;
}

[코드 리뷰]
JavaScript의 Date 객체를 몰라서 나는 조금 무식하게 풀었다...

먼저 각 요일을 담아주는 배열을 dayOfTheWeek라는 변수에 담아주었다
최초의 index 변수를 선언한 이유는 추후 배열의 인덱스가 초과되더라도 다시 첫번째 인덱스부터 돌 수 있게 하기 위함이다.

분기문을 사용하여 1월부터 12월까지의 경우의 수를 만들었다
1월 같은 경우는 그냥 반복문을 통해 인덱스의 값을 b만큼 더해주었고
answer에는 dayOfTheWeekdml의 (index - 1) % dayOfTheWeek.length번째 인자 값을 담아주었다
index - 1을 한 이유는 배열은 0번째부터 시작하기 때문이고 배열의 길이만큼 나눈 나머지 값으로 answer에 담아준다면
배열의 index를 초과하더라도 나머지 값으로 다시 0부터 돌기 때문이다.
(이래서 미리 index라는 변수를 선언해두었다)

2월부터는 1월이 31일까지 이기 때문에 index 값을 31을 주고 시작하여 반복문을 돌렸고
그 이후 3월부터 12월도 마찬가지로 각 달의 일수 만큼 index의 값을 더하고 반복문을 시작하여주었다!
