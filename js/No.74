function solution(park, routes) {
    const dirs = { E: [0, 1], W: [0, -1], S: [1, 0], N: [-1, 0] }
    let [x, y] = [0, 0]

    for (let i = 0; i < park.length; i++) {
        if (park[i].includes('S')) {
            [x, y] = [i, park[i].indexOf('S')]
            break;
        }
    }

    routes.forEach(route => {
        const [r, n] = route.split(' ');
        let [nx, ny] = [x, y];
        let count = 0;
        while (count < n) {
            [nx, ny] = [nx + dirs[r][0], ny + dirs[r][1]];
            if (!park[nx] || !park[nx][ny] || park[nx][ny] === 'X') break;
            count++
        }
        if (count == n) [x, y] = [nx, ny];
    });

    return [x, y]
}

[코드 리뷰]
많은 시간이 걸려도 문제를 해결할 수 없어 다른 사람의 풀이를 보았다

dirs라는 변수에 E는 오른쪽으로 이동이므로 두번째 요소에 1을 더해주고
반대로 W는 1을 빼주고 S는 첫번째 요소에 1을 더해주고 N은 첫번째 요소에 1을 빼준다

해당 이유는 park가 직사각형이고 오른쪽으로 갈 수록 문자열의 인덱스가 커지고 아래로 갈수록 배열의 인덱스가 커지기 때문이다
리턴할 xy값을 초기화해준 뒤 for문을 통해 start 지점을 찾아준다
park배열을 순회하여 S가 포함된 문자열을 찾은 뒤 해당 문자열의 인덱스를 x 값에 넣어주고 문자열에서 S의 인덱스 값을 y 값에 넣어준다

routes 배열을 순회하며 r과 n에는 각각 이동할 위치와 몇칸 이동할지를 담아주고
장애물이 있는지 park를 벗어나지는 않는지 확인해줄 임시 좌표 [nx, ny]는 시작지점으로 초기화해준다
count값을 줘서 n만큼 이동할 수 있도록 while문을 돌아주고

임시좌표 값에 미리 선언해둔 객체를 이용하여 1칸씩 이동해본다
이동하면서 배열을 벗어나거나 문자열의 길이를 벗어나거나 문자열의 X가 포함되어있을 경우에는
while문을 끝내준 뒤 다음 route를 진행해준다

그렇게 한칸씩 이동했을 때 count 값이 n값과 같아진다면 실제 좌표값을 임시 좌표값으로 바꿔준다
그렇게 모든 route를 다 순회한 뒤 실제 좌표 값을 리턴해준다
