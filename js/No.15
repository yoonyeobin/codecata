이번 문제는 문자열로 구성된 리스트를 각 문자의 n번째 글자를 기준으로 문자열을 오름차순 정렬하는 문제이다!
문자열의 n번째 글자로 접근하는 방법은 []를 이용하면 된다.

strings[i][n] 이렇게 i번째 요소의 n번째 글자 접근하면 될 것 같다.
그러면 기준이라는 말은 조건이니 if문을 사용해주면 될 것 같은데..

a부터 z까지 다 넣어줘야 하는 건가....

일단 오름차순으로 정렬하는 거기 때문에 오름차순으로 정렬하는 메서드가 있는지 찾아보았다.
sort()를 이용하면 된다고 한다.

근데 우리는 그냥 오름차순이 아닌 n번째 글자를 기준으로
비교하여 오름차순을 해야한다...

그것도 찾아본 결과 sort(a, b)라는 비교함수를 찾아볼 수 있었다!
여기서 (a, b)의 역할은 배열의 두 요소를 나타낸다고 한다!

비교 함수에서 반환값의 의미는 아래오 같다고 한다
음수 : a가 b보다 앞에 와야 한다.
양수 : b가 a보다 먼저 오도록 한다.
0 : a와 b의 순서를 변경하지 않는다.

위의 반환 값들을 이용하여 조건문을 작성하면 될 것 같다...

먼저 비교해주는 함수를 선언해준다
function compare(a, b) {
        if (a[n] < b[n]) {
            return -1;
        } else if (a[n] > b[n]) {
        return 1;
    } else {
        return 0;
    }

위와 같이 비교 함수를 만들어주고 strings라는 문자열에 해당 함수를 이용하여 sort로 오름차순으로 배열을 해준다면

function solution(strings, n) {
    function compare(a, b) {
        if (a[n] < b[n]) {
            return -1;
        } else if (a[n] > b[n]) {
        return 1;
    } else {
        return 0;
    }
}
     var answer = strings.sort(compare);
    return answer;
}

정답이 아니다... 1개는 맞았는데 2번째 문제가 틀리다...
뭐가 문제인지 찾아보니 제한 조건 중 "인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 문자열이 앞쪽에 위치합니다." 있었다!
나는 같을 경우에는 순서를 교체하지 않았는데... 조건을 변경해줘야 할 것 같다!

.localeCompare 메서드를 사용하면 사전순으로 정렬할 수 있다고 한다
(문자).localeCompare(비교대상)

else의 경우 return을 0으로 하여 자리를 바꾸지 않았는데
a.localeCompare(b)를 넣어줘서 사전순으로 변경되도록 하여야겠다!

function solution(strings, n) {
    function compare(a, b) {
        if (a[n] < b[n]) {
            return -1;
        } else if (a[n] > b[n]) {
        return 1;
    } else {
        return a.localeCompare(b);
    }
}
     var answer = strings.sort(compare);
    return answer;
}

결과는 정답!!!
