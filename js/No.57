function solution(k, m, score) {
    let answer = 0;

    // 이익이 발생하지 않는 경우
    if (m > score.length) {
        return 0
    }

    // 품질이 좋은 사과부터 내림차순으로 변경
    score.sort((a, b) => b - a)

    // 박스에 담지 못하는 사과 버리기
    if (score.length % m !== 0) {
        score = score.slice(0, -(score.length % m))
    }

    for (let i = 0; i < score.length; i += m) {
        const box = [];
        for (let j = 0; j < m; j++) {
            box.push(score[i + j]);
        }
        const lowPrice = Math.min(...box);
        answer += lowPrice * m
    }
    return answer
}

[코드 리뷰]
먼저 사과가 1박스도 채우지 못할 경우는 수익이 발생하지 않으므로 조건문을 넣어주었다
품질이 좋은 사과부터 배열을 내림차순으로 정렬해주었고,
박스에 딱 나누어 떨어지지 않을 경우에는 나머지 사과들은 버려주었다

이중 for문을 통해 box라는 빈 배열을 생성해 품질이 좋은 사과부터 담아주어
해당 박스의 가장 작은 값 * 박스에 들어가는 수 만큼 anwer에 더해주었다

오늘 처음 안 사실인데 i의 증감 조건에는 저런 식으로 더하기 할당을 해줄 수 있다
모르는 상태에서 그냥 시도해 보았는데 가능해서 놀라웠다
